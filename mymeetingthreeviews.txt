actually i have 3 codes for meeting page where one is for day view , month view, week view i need your help to merge it into a single code which contains all three views correctly      
//month view 
class MeetingPage extends StatefulWidget {
  const MeetingPage({super.key});

  @override
  State<MeetingPage> createState() => _MeetingPageState();
}


class _MeetingPageState extends State<MeetingPage> {
  CalendarView _calendarView = CalendarView.month;
  String selectedView = "Day";
 // CalendarFormat calendarFormat = CalendarFormat.month;
  DateTime selectedDay = DateTime.now();

  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Icon(Icons.videocam, color: Colors.black),
            SizedBox(width: 8),
            Text(
              "My Meetings",
              style: TextStyle(
                color: Colors.blue,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          SizedBox(height: 10),
          ToggleButtons(
            isSelected: [selectedView == "Month", selectedView == "Week", selectedView == "Day"],
            onPressed: (index) {
              setState(() {
                if (index == 0) {
                  selectedView = "Month";
                  _calendarView = CalendarView .month;
                } else if (index == 1) {
                  selectedView = "Week";
                  _calendarView  = CalendarView .week;
                } else {
                  selectedView = "Day";
                  _calendarView  = CalendarView.week;
                }
              });
            },
            children: [
              Padding(padding: EdgeInsets.all(8), child: Text("Month")),
              Padding(padding: EdgeInsets.all(8), child: Text("Week")),
              Padding(padding: EdgeInsets.all(8), child: Text("Day")),
            ],
          ),
          Expanded(
            child: SfCalendar(
              view: _calendarView,
              dataSource: MeetingDataSource(getMeetings()),
              timeSlotViewSettings: TimeSlotViewSettings(
                timeIntervalHeight: 60,
                timeFormat: 'h:mm a',
              ),
              todayHighlightColor: Colors.blue,
              selectionDecoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.2),
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: Colors.blue, width: 2),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                Text("Join Meeting using Meeting ID"),
                SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        decoration: InputDecoration(
                          hintText: "Meeting ID",
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: () {},
                      child: Text("Join Now"),
                    ),
                    
                  ],
                ),
              ],
            ),
          ),
          SizedBox(height: 20),
        ], //refer sneha(work)
      ),
    );
  }
  Widget _viewButton(String text, CalendarView view) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: _calendarView == view ? Colors.black : Colors.white,
          foregroundColor: _calendarView == view ? Colors.white : Colors.black,
        ),
        onPressed: () {
          setState(() {
            _calendarView = view;
          });
        },
        child: Text(text),
      ),
    );
  }
}

List<Appointment> getMeetings() {
  return [
    Appointment(
      startTime: DateTime(2025, 2, 26, 10, 0),
      endTime: DateTime(2025, 2, 26, 10, 40),
      subject: 'My Meeting',
      color: Colors.blue,
    ),
  ];
}

class MeetingDataSource extends CalendarDataSource {
  MeetingDataSource(List<Appointment> source) {
    appointments = source;
  }
}
// day view 

class MeetingPage extends StatefulWidget {
  @override
  _MeetingPageState createState() => _MeetingPageState();
}

class _MeetingPageState extends State<MeetingPage> {

  String selectedView = "Day"; // Default selected view

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () {},
        ),
        title: Row(
          children: [
            Icon(Icons.videocam, color: Colors.black),
            SizedBox(width: 5),
            Text(
              "My Meetings",
              style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "Wednesday Feb 26",
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                ),
                Row(
                  children: ["Month", "Week", "Day"].map((view) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 4.0),
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          backgroundColor: selectedView == view ? Colors.black : Colors.white,
                          foregroundColor: selectedView == view ? Colors.white : Colors.black,
                          side: BorderSide(color: Colors.black),
                        ),
                        onPressed: () {
                          setState(() {
                            selectedView = view;
                          });
                        },
                        child: Text(view),
                      ),
                    );
                  }).toList(),
                ),
              ],
            ),
          ),
          Expanded(
  child: Padding(
    padding: EdgeInsets.all(16), // Padding to wrap the table
    child: Table(
      columnWidths: {
        0: FixedColumnWidth(80), // Width for time slot
        1: FixedColumnWidth(0), // Width for vertical divider
        2: FlexColumnWidth(), // Expands to fill remaining space
      },
      border: TableBorder.all(
        color: Colors.black,
        width: 1,
      ),
      children: List.generate(24, (index) {
        return TableRow(
          children: [
            // Time Slot Column
            Padding(
              padding: EdgeInsets.symmetric(vertical: 10),
              child: Text(
                "${index % 12 == 0 ? 12 : index % 12}:00 ${index < 12 ? 'AM' : 'PM'}",
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                textAlign: TextAlign.center,
              ),
            ),

            // Vertical Divider Column
            Container(
              width: 1,
              height: 40,
              color: Colors.grey.shade400,
            ),

            // Meeting Space Column
            Padding(
              padding: EdgeInsets.symmetric(vertical: 10),
              child: Text(""), // Placeholder for meetings
            ),
          ],
        );
      }),
    ),
  ),
),
        ],
      ),
       );
  }
}   
//week view 
class MeetingPage extends StatefulWidget {
  @override
  _MeetingPageState createState() => _MeetingPageState();
}

class _MeetingPageState extends State<MeetingPage> {
  DateTime _currentDate = DateTime.now();
  CalendarView _calendarView = CalendarView.week;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Icon(Icons.videocam, color: Colors.black),
            SizedBox(width: 8),
            Text("My Meetings", style: TextStyle(color: Colors.blue, fontSize: 20, fontWeight: FontWeight.bold)),
          ],
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(_getFormattedWeekRange(), style: TextStyle(fontSize: 14)),
                ToggleButtons(
                  isSelected: [_calendarView == CalendarView.month, _calendarView == CalendarView.week, _calendarView == CalendarView.day],
                  selectedColor: Colors.white,
                  fillColor: Colors.black,
                  borderRadius: BorderRadius.circular(8),
                  children: [
                    Padding(padding: EdgeInsets.symmetric(horizontal: 12), child: Text("Month")),
                    Padding(padding: EdgeInsets.symmetric(horizontal: 12), child: Text("Week")),
                    Padding(padding: EdgeInsets.symmetric(horizontal: 12), child: Text("Day")),
                  ],
                  onPressed: (index) {
                    setState(() {
                      if (index == 0) _calendarView = CalendarView.month;
                      if (index == 1) _calendarView = CalendarView.week;
                      if (index == 2) _calendarView = CalendarView.day;
                    });
                  },
                ),
              ],
            ),
          ),
          Expanded(
  child: SfCalendar(
    view: _calendarView,
    dataSource: MeetingDataSource(_getDataSource()),
    timeSlotViewSettings: TimeSlotViewSettings(startHour: 0, endHour: 24),
    headerHeight: 0, // Hides the month & year header
    viewHeaderStyle: ViewHeaderStyle(backgroundColor: Colors.transparent), // Optional: Removes view header styling
    onViewChanged: (viewChangedDetails) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          setState(() {
            _currentDate = viewChangedDetails.visibleDates.first;
          });
        }
      });
    },
  ),
),
   ],
      ),
    );
  }

  String _getFormattedWeekRange() {
    DateTime startOfWeek = _currentDate.subtract(Duration(days: _currentDate.weekday % 7));
    DateTime endOfWeek = startOfWeek.add(Duration(days: 6));
    return "${DateFormat.MMMd().format(startOfWeek)} - ${DateFormat.MMMd().format(endOfWeek)}";
  }

  List<Meeting> _getDataSource() {
    return [
      Meeting('My Meeting', DateTime(2025, 2, 26, 10, 0), DateTime(2025, 2, 26, 10, 40), Colors.blue, false),
    ];
  }
}

class Meeting {
  Meeting(this.eventName, this.from, this.to, this.background, this.isAllDay);
  String eventName;
  DateTime from;
  DateTime to;
  Color background;
  bool isAllDay;
}

class MeetingDataSource extends CalendarDataSource {
  MeetingDataSource(List<Meeting> source) {
    appointments = source;
  }

  @override
  DateTime getStartTime(int index) => appointments![index].from;
  @override
  DateTime getEndTime(int index) => appointments![index].to;
  @override
  String getSubject(int index) => appointments![index].eventName;
  @override
  Color getColor(int index) => appointments![index].background;
  @override
  bool isAllDay(int index) => appointments![index].isAllDay;
}



//month
class MeetingPage extends StatefulWidget {
  const MeetingPage({super.key});

  @override
  State<MeetingPage> createState() => _MeetingPageState();
}


class _MeetingPageState extends State<MeetingPage> {
  CalendarView _calendarView = CalendarView.month;
  String selectedView = "Day";
 // CalendarFormat calendarFormat = CalendarFormat.month;
  DateTime selectedDay = DateTime.now();

  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Icon(Icons.videocam, color: Colors.black),
            SizedBox(width: 8),
            Text(
              "My Meetings",
              style: TextStyle(
                color: Colors.blue,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          // Padding(
          //   padding: const EdgeInsets.all(8.0),
          //   child: Row(
          //     mainAxisAlignment: MainAxisAlignment.center,
          //     children: [
          //       _viewButton("Month", CalendarView.month),
          //       _viewButton("Week", CalendarView.week),
          //       _viewButton("Day", CalendarView.day),
          //     ],
          //   ),
          // ),
          SizedBox(height: 10),
          ToggleButtons(
            isSelected: [selectedView == "Month", selectedView == "Week", selectedView == "Day"],
            onPressed: (index) {
              setState(() {
                if (index == 0) {
                  selectedView = "Month";
                  _calendarView = CalendarView .month;
                } else if (index == 1) {
                  selectedView = "Week";
                  _calendarView  = CalendarView .week;
                } else {
                  selectedView = "Day";
                  _calendarView  = CalendarView.week;
                }
              });
            },
            children: [
              Padding(padding: EdgeInsets.all(8), child: Text("Month")),
              Padding(padding: EdgeInsets.all(8), child: Text("Week")),
              Padding(padding: EdgeInsets.all(8), child: Text("Day")),
            ],
          ),
          Expanded(
            child: SfCalendar(
              view: _calendarView,
              dataSource: MeetingDataSource(getMeetings()),
              timeSlotViewSettings: TimeSlotViewSettings(
                timeIntervalHeight: 60,
                timeFormat: 'h:mm a',
              ),
              todayHighlightColor: Colors.blue,
              selectionDecoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.2),
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: Colors.blue, width: 2),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                Text("Join Meeting using Meeting ID"),
                SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        decoration: InputDecoration(
                          hintText: "Meeting ID",
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: () {},
                      child: Text("Join Now"),
                    ),
                    
                  ],
                ),
              ],
            ),
          ),
          SizedBox(height: 20),
        ], //refer sneha(work)
      ),
    );
  }
  Widget _viewButton(String text, CalendarView view) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: _calendarView == view ? Colors.black : Colors.white,
          foregroundColor: _calendarView == view ? Colors.white : Colors.black,
        ),
        onPressed: () {
          setState(() {
            _calendarView = view;
          });
        },
        child: Text(text),
      ),
    );
  }
}

List<Appointment> getMeetings() {
  return [
    Appointment(
      startTime: DateTime(2025, 2, 26, 10, 0),
      endTime: DateTime(2025, 2, 26, 10, 40),
      subject: 'My Meeting',
      color: Colors.blue,
    ),
  ];
}

class MeetingDataSource extends CalendarDataSource {
  MeetingDataSource(List<Appointment> source) {
    appointments = source;
  }
}

